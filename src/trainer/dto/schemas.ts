/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Trainer API
 * OpenAPI spec version: 1.0.0
 */
import { z as zod } from "zod";

export const createGymsBody = zod.object({
  trainerId: zod.string(),
  gyms: zod.array(
    zod.object({
      name: zod.string(),
      address: zod.string(),
      geoLat: zod.number().optional(),
      geoLng: zod.number().optional(),
      workHours: zod.string().optional(),
    }),
  ),
});

export const createGymsResponse = zod.object({
  message: zod.string().optional(),
});

export const createGroupsBody = zod.object({
  trainerId: zod.string(),
  groups: zod.array(
    zod.object({
      name: zod.string(),
      gymId: zod.string().optional(),
      trainerIds: zod.array(zod.string()).optional(),
      traineeIds: zod.array(zod.string()).optional(),
    }),
  ),
});

export const createGroupsResponse = zod.object({
  message: zod.string().optional(),
});

export const getTrainerProfileResponse = zod.object({
  id: zod.string(),
  userId: zod.string(),
});

export const createTrainerProfileBody = zod.object({
  specialization: zod.string().optional(),
  experience: zod.number().optional(),
  description: zod.string().optional(),
  achievements: zod.array(zod.string()).optional(),
});

export const createTrainerProfileResponse = zod.object({
  id: zod.string(),
});

export const scanTraineeBody = zod.object({
  traineeUsername: zod.string(),
});

export const scanTraineeResponse = zod.object({
  status: zod.enum([
    "noActiveTraining",
    "traineeAlreadyRecorded",
    "traineeRecordedSuccessfully",
    "specifyTraining",
  ]),
  trainings: zod
    .array(
      zod.object({
        id: zod.string().optional(),
        type: zod.string().optional(),
        startDate: zod.string().datetime({}).optional(),
        name: zod.string().optional(),
      }),
    )
    .optional(),
});

export const scanAndCreateTrainingBody = zod.object({
  traineeUsername: zod.string(),
  training: zod
    .object({
      type: zod.enum(["INDIVIDUAL", "GROUP"]).optional(),
      date: zod.string().datetime({}).optional(),
      durationMin: zod.number().optional(),
      gymId: zod.string().optional(),
      groupId: zod.string().optional(),
      templateId: zod.string().optional(),
    })
    .optional(),
});

export const scanAndCreateTrainingResponse = zod.object({
  status: zod.enum(["trainingCreated"]),
  trainingId: zod.string(),
  traineeAdded: zod.boolean(),
});

export const attachToExistingTrainingBody = zod.object({
  trainingId: zod.string(),
  traineeUsername: zod.string(),
});

export const attachToExistingTrainingResponse = zod.object({
  status: zod.enum(["added_to_existing_training"]),
});
