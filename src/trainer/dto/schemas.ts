/**
 * Generated by orval v7.8.0 üç∫
 * Do not edit manually.
 * Trainer API
 * OpenAPI spec version: 1.0.0
 */
import { z as zod } from "zod";

export const createTrainingsBody = zod.object({
  trainerId: zod.string().describe("ID of the trainer creating the trainings"),
  trainings: zod
    .array(
      zod.object({
        name: zod.string().describe("Name of the training"),
        type: zod
          .enum(["INDIVIDUAL", "GROUP"])
          .optional()
          .describe("Type of the training"),
        startDate: zod
          .string()
          .datetime({})
          .optional()
          .describe("Start date and time of the training"),
        durationMin: zod
          .number()
          .optional()
          .describe("Duration of the training in minutes"),
        gymId: zod
          .string()
          .optional()
          .describe("ID of the gym where training takes place"),
        groupId: zod
          .string()
          .optional()
          .describe("ID of the group for group training"),
        templateId: zod
          .string()
          .optional()
          .describe("ID of the training template"),
        price: zod.number().optional().describe("Price of the training"),
        trainerIds: zod
          .array(zod.string())
          .optional()
          .describe("Array of trainer IDs for the training"),
        isSaveAsTemplate: zod
          .boolean()
          .optional()
          .describe(
            "Flag to indicate if the training should be saved as a template",
          ),
        timeSlots: zod
          .array(
            zod.object({
              dayOfTheWeek: zod
                .string()
                .describe("Day of the week (e.g., Monday, Tuesday)"),
              hours: zod.number().describe("Hour in 24h format"),
              minutes: zod.number().describe("Minutes past the hour"),
            }),
          )
          .optional()
          .describe("Recurring time slots for the training"),
      }),
    )
    .describe("Array of trainings to create"),
});

export const createTrainingsResponse = zod.object({
  message: zod.string().optional(),
});

export const createGymsBody = zod.object({
  trainerId: zod.string(),
  gyms: zod.array(
    zod.object({
      name: zod.string(),
      address: zod.string(),
      geoLat: zod.number().optional(),
      geoLng: zod.number().optional(),
      workHours: zod.string().optional(),
    }),
  ),
});

export const createGymsResponse = zod.object({
  message: zod.string().optional(),
});

export const createGroupsBody = zod.object({
  trainerId: zod.string(),
  groups: zod.array(
    zod.object({
      name: zod.string(),
      gymId: zod.string().optional(),
      trainerIds: zod.array(zod.string()).optional(),
      traineeIds: zod.array(zod.string()).optional(),
    }),
  ),
});

export const createGroupsResponse = zod.object({
  message: zod.string().optional(),
});

export const persistContactInformationBody = zod.object({
  trainerId: zod.string(),
  emails: zod.array(zod.string()).optional(),
  phoneNumbers: zod.array(zod.string()).optional(),
  aboutMe: zod.string().optional(),
  socials: zod
    .array(
      zod.object({
        name: zod.string(),
        url: zod.string(),
      }),
    )
    .optional(),
});

export const persistContactInformationResponse = zod.object({
  message: zod.string().optional(),
});

export const createSubscriptionsBody = zod.object({
  trainerId: zod.string(),
  subscriptions: zod.array(
    zod.object({
      createdById: zod.string(),
      maxTrainings: zod.number().optional(),
      maxDays: zod.number().optional(),
      price: zod.number().optional(),
      notes: zod.string().optional(),
      type: zod
        .enum(["PERIOD", "DAYS", "PERIOD_AND_DAYS"])
        .describe("Type of the subscription"),
      isPublic: zod.boolean().optional(),
      groupIds: zod.array(zod.string()).optional(),
    }),
  ),
});

export const createSubscriptionsResponse = zod.object({
  message: zod.string().optional(),
});

export const getTrainerProfileResponse = zod.object({
  id: zod.string(),
  userId: zod.string(),
});

export const createTrainerProfileBody = zod.object({
  specialization: zod.string().optional(),
  experience: zod.number().optional(),
  description: zod.string().optional(),
  achievements: zod.array(zod.string()).optional(),
});

export const createTrainerProfileResponse = zod.object({
  id: zod.string(),
});

export const scanTraineeBody = zod.object({
  traineeUsername: zod.string(),
});

export const scanTraineeResponse = zod.object({
  status: zod.enum([
    "noActiveTraining",
    "traineeAlreadyRecorded",
    "traineeRecordedSuccessfully",
    "specifyTraining",
  ]),
  trainings: zod
    .array(
      zod.object({
        id: zod.string().optional(),
        type: zod.string().optional(),
        startDate: zod.string().datetime({}).optional(),
        name: zod.string().optional(),
      }),
    )
    .optional(),
});

export const scanAndCreateTrainingBody = zod.object({
  traineeUsername: zod.string(),
  training: zod
    .object({
      type: zod.enum(["INDIVIDUAL", "GROUP"]).optional(),
      date: zod.string().datetime({}).optional(),
      durationMin: zod.number().optional(),
      gymId: zod.string().optional(),
      groupId: zod.string().optional(),
      templateId: zod.string().optional(),
    })
    .optional(),
});

export const scanAndCreateTrainingResponse = zod.object({
  status: zod.enum(["trainingCreated"]),
  trainingId: zod.string(),
  traineeAdded: zod.boolean(),
});

export const attachToExistingTrainingBody = zod.object({
  trainingId: zod.string(),
  traineeUsername: zod.string(),
});

export const attachToExistingTrainingResponse = zod.object({
  status: zod.enum(["added_to_existing_training"]),
});
