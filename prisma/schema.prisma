// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleType {
  TRAINER
  TRAINEE
  PARENT
  ADMIN
  SUPERADMIN
}

enum LangCode {
  EN
  UA
  PL
}

enum PlanType {
  FREE
  TRIAL
  PREMIUM
  LIMITED
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  USED_UP
}

enum TrainingType {
  GROUP
  INDIVIDUAL
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  EXCUSED
}

enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  passwordHash     String?
  googleId         String?   @unique
  name             String
  preferredLang    LangCode  @default(EN)
  activeRole       RoleType?
  isEmailConfirmed Boolean   @default(false)
  emailConfirmCode String?
  username         String?   @unique

  roles              Role[]
  trainerProfile     TrainerProfile?
  traineeProfile     TraineeProfile?
  parentProfile      ParentProfile?
  adminProfile       AdminProfile?
  telegramLink       TelegramLink?
  scannedAttendances Attendance[]     @relation("ScannedByUser")
  refreshSessions    RefreshSession[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Role {
  id     String   @id @default(cuid())
  type   RoleType
  userId String
  user   User     @relation(fields: [userId], references: [id])

  @@unique([type, userId])
}

model TrainerProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  groups           Group[]              @relation("GroupTrainers")
  gyms             Gym[]                @relation("TrainerGyms")
  subscriptions    Subscription[]
  trainees         TrainerTraineeLink[]
  referralLinks    ReferralInvite[]     @relation("TrainerIssuedInvites")
  acceptedReferral ReferralInvite?      @relation("TrainerAcceptedInvite")
  templates        TrainingTemplate[]

  currentPlan      PlanType  @default(FREE)
  planStartedAt    DateTime?
  planUntil        DateTime?
  trialActivatedAt DateTime?

  limits TrainerLimits?

  trainings Training[] @relation("TrainingTrainers")
}

model TrainerLimits {
  id           String   @id @default(cuid())
  trainerId    String   @unique
  maxTrainees  Int?
  maxGroups    Int?
  maxGyms      Int?
  maxTemplates Int?
  updatedAt    DateTime @updatedAt

  trainer TrainerProfile @relation(fields: [trainerId], references: [id])
}

model ReferralInvite {
  id           String  @id @default(cuid())
  code         String  @unique
  issuedById   String
  acceptedById String? @unique

  usedAt       DateTime?
  bonusGranted Boolean   @default(false)

  issuedBy   TrainerProfile  @relation("TrainerIssuedInvites", fields: [issuedById], references: [id])
  acceptedBy TrainerProfile? @relation("TrainerAcceptedInvite", fields: [acceptedById], references: [id])
}

model TraineeProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  groups        Group[]              @relation("TraineeGroups")
  subscriptions Subscription[]
  attendances   Attendance[]
  parents       ParentTraineeLink[]
  trainers      TrainerTraineeLink[]
}

model TrainerTraineeLink {
  id        String    @id @default(cuid())
  trainerId String
  traineeId String
  isActive  Boolean   @default(true)
  frozenAt  DateTime?

  trainer TrainerProfile @relation(fields: [trainerId], references: [id])
  trainee TraineeProfile @relation(fields: [traineeId], references: [id])

  @@unique([trainerId, traineeId])
}

model ParentProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  trainees ParentTraineeLink[]
}

model ParentTraineeLink {
  id        String @id @default(cuid())
  parentId  String
  traineeId String

  parent  ParentProfile  @relation(fields: [parentId], references: [id])
  trainee TraineeProfile @relation(fields: [traineeId], references: [id])

  @@unique([parentId, traineeId])
}

model AdminProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  gyms Gym[] @relation("GymAdmins")
}

model TelegramLink {
  id         String   @id @default(cuid())
  userId     String   @unique
  telegramId String   @unique
  username   String?
  linkedAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Gym {
  id        String  @id @default(cuid())
  name      String
  address   String
  geoLat    Float?
  geoLng    Float?
  workHours String?

  trainers  TrainerProfile[]   @relation("TrainerGyms")
  admins    AdminProfile[]     @relation("GymAdmins")
  groups    Group[]
  trainings Training[]
  templates TrainingTemplate[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id    String  @id @default(cuid())
  name  String
  gymId String?
  gym   Gym?    @relation(fields: [gymId], references: [id])

  trainees  TraineeProfile[]   @relation("TraineeGroups")
  trainers  TrainerProfile[]   @relation("GroupTrainers")
  trainings Training[]
  templates TrainingTemplate[]
}

model Training {
  id          String        @id @default(cuid())
  type        TrainingType?
  startDate   DateTime?     @map("start_date")
  durationMin Int?
  name        String?
  gymId       String?
  groupId     String?
  templateId  String?

  gym         Gym?              @relation(fields: [gymId], references: [id])
  group       Group?            @relation(fields: [groupId], references: [id])
  template    TrainingTemplate? @relation(fields: [templateId], references: [id])
  attendances Attendance[]
  trainers    TrainerProfile[]  @relation("TrainingTrainers")
}

model Attendance {
  id              String           @id @default(cuid())
  traineeId       String
  trainingId      String
  status          AttendanceStatus @default(PRESENT)
  markedAt        DateTime         @default(now())
  scannedByUserId String?
  subscriptionId  String?

  trainee      TraineeProfile @relation(fields: [traineeId], references: [id])
  training     Training       @relation(fields: [trainingId], references: [id])
  scannedBy    User?          @relation("ScannedByUser", fields: [scannedByUserId], references: [id])
  subscription Subscription?  @relation(fields: [subscriptionId], references: [id])
}

model Subscription {
  id            String             @id @default(cuid())
  traineeId     String
  createdById   String
  maxTrainings  Int?
  validUntil    DateTime?
  usedTrainings Int                @default(0)
  isPaid        Boolean            @default(false)
  notes         String?
  status        SubscriptionStatus @default(ACTIVE)
  type          String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  trainee     TraineeProfile @relation(fields: [traineeId], references: [id])
  createdBy   TrainerProfile @relation(fields: [createdById], references: [id])
  attendances Attendance[]
}

model TrainingTemplate {
  id        String  @id @default(cuid())
  groupId   String
  trainerId String
  gymId     String?

  durationMin Int
  type        TrainingType

  startDate DateTime
  endDate   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group   Group          @relation(fields: [groupId], references: [id])
  trainer TrainerProfile @relation(fields: [trainerId], references: [id])
  gym     Gym?           @relation(fields: [gymId], references: [id])

  timeSlots TimeSlot[]
  trainings Training[]
}

model TimeSlot {
  id         String  @id @default(cuid())
  templateId String
  dayOfWeek  WeekDay
  time       String // HH:mm

  template TrainingTemplate @relation(fields: [templateId], references: [id])
}

model RefreshSession {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  tokenHash String
  ip        String
  userAgent String
  isRevoked Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([tokenHash])
}
