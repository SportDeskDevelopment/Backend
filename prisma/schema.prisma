// schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum RoleType {
  TRAINER
  TRAINEE
  PARENT
  ADMIN
  SUPERADMIN
}

enum Sports {
  KARATE
  BOX
  SWIMMING
}

enum LangCode {
  EN
  UA
  PL
}

enum PlanType {
  FREE
  TRIAL
  PREMIUM
  LIMITED
}

enum TrainingType {
  GROUP
  INDIVIDUAL
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  EXCUSED
}

enum WeekDay {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum SubscriptionType {
  PERIOD
  DAYS
  PERIOD_AND_DAYS
}

enum SubscriptionActivationType {
  WHEN_TRAINING_ATTENDED
  FROM_PARTICULAR_DATE
  FROM_ACTIVE_SUBSCRIPTION_ENDS
}

model User {
  id               String    @id @default(cuid())
  email            String    @unique
  passwordHash     String?
  googleId         String?   @unique
  name             String
  preferredLang    LangCode  @default(EN)
  activeRole       RoleType?
  isEmailConfirmed Boolean   @default(false)
  age              Int?
  emailConfirmCode String?
  username         String    @unique
  photoUrl         String?

  roles              RoleType[]
  trainerProfile     TrainerProfile?
  traineeProfile     TraineeProfile?
  parentProfile      ParentProfile?
  adminProfile       AdminProfile?
  telegramLink       TelegramLink?
  createdAttendances Attendance[]     @relation("createdBy")
  refreshSessions    RefreshSession[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TrainerProfile {
  id                    String      @id @default(cuid())
  userId                String      @unique
  user                  User        @relation(fields: [userId], references: [id])
  description           String?
  trainingSince         Int?
  sports                Sports[]    @default([])
  publicContactId       String?
  publicContact         PublicInfo? @relation(fields: [publicContactId], references: [id])
  isOnboardingCompleted Boolean     @default(false)

  groups           Group[]              @relation("GroupTrainers")
  gyms             Gym[]                @relation("TrainerGyms")
  subscriptions    Subscription[]
  trainees         TrainerTraineeLink[]
  referralLinks    ReferralInvite[]     @relation("TrainerIssuedInvites")
  acceptedReferral ReferralInvite?      @relation("TrainerAcceptedInvite")
  templates        TrainingTemplate[]

  currentPlan      PlanType  @default(FREE)
  planStartedAt    DateTime?
  planUntil        DateTime?
  trialActivatedAt DateTime?
  qrCodeKey        String?

  limits TrainerLimits?

  trainings            Training[]            @relation("TrainingTrainers")
  attendancesMarkedBy  Attendance[]          @relation("MarkedAsPaidByTrainer")
  unregisteredTrainees UnregisteredTrainee[]
}

model TrainerLimits {
  id               String   @id @default(cuid())
  trainerId        String   @unique
  maxTrainees      Int?
  maxGroups        Int?
  maxGyms          Int?
  maxTemplates     Int?
  maxSubscriptions Int?
  updatedAt        DateTime @updatedAt

  trainer TrainerProfile @relation(fields: [trainerId], references: [id])
}

model DefaultTrainerLimits {
  id               String   @id @default(cuid())
  maxTrainees      Int?
  maxGroups        Int?
  maxGyms          Int?
  maxTemplates     Int?
  maxSubscriptions Int?
  updatedAt        DateTime @updatedAt
  type             PlanType
}

model ReferralInvite {
  id           String  @id @default(cuid())
  code         String  @unique
  issuedById   String
  acceptedById String? @unique

  usedAt       DateTime?
  bonusGranted Boolean   @default(false)

  issuedBy   TrainerProfile  @relation("TrainerIssuedInvites", fields: [issuedById], references: [id])
  acceptedBy TrainerProfile? @relation("TrainerAcceptedInvite", fields: [acceptedById], references: [id])
}

model TraineeProfile {
  id                    String  @id @default(cuid())
  userId                String  @unique
  user                  User    @relation(fields: [userId], references: [id])
  unregisteredTraineeId String?

  groups               Group[]               @relation("TraineeGroups")
  attendances          Attendance[]
  parents              ParentTraineeLink[]
  trainers             TrainerTraineeLink[]
  subscriptionTrainees SubscriptionTrainee[]
  unregisteredTrainee  UnregisteredTrainee[]
}

model TrainerTraineeLink {
  id        String    @id @default(cuid())
  trainerId String
  traineeId String
  isActive  Boolean   @default(true)
  frozenAt  DateTime?

  trainer TrainerProfile @relation(fields: [trainerId], references: [id])
  trainee TraineeProfile @relation(fields: [traineeId], references: [id])

  @@unique([trainerId, traineeId])
}

model ParentProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  trainees ParentTraineeLink[]
}

model ParentTraineeLink {
  id        String @id @default(cuid())
  parentId  String
  traineeId String

  parent  ParentProfile  @relation(fields: [parentId], references: [id])
  trainee TraineeProfile @relation(fields: [traineeId], references: [id])

  @@unique([parentId, traineeId])
}

model AdminProfile {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  gyms Gym[] @relation("GymAdmins")
}

model TelegramLink {
  id         String   @id @default(cuid())
  userId     String   @unique
  telegramId String   @unique
  username   String?
  linkedAt   DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Gym {
  id        String  @id @default(cuid())
  name      String
  address   String
  geoLat    Float?
  geoLng    Float?
  workHours String?

  trainers  TrainerProfile[]   @relation("TrainerGyms")
  admins    AdminProfile[]     @relation("GymAdmins")
  groups    Group[]
  trainings Training[]
  templates TrainingTemplate[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id    String  @id @default(cuid())
  name  String
  gymId String?
  gym   Gym?    @relation(fields: [gymId], references: [id])

  trainees      TraineeProfile[]   @relation("TraineeGroups")
  trainers      TrainerProfile[]   @relation("GroupTrainers")
  trainings     Training[]
  templates     TrainingTemplate[]
  subscriptions Subscription[]
}

model Training {
  id          String        @id @default(cuid())
  type        TrainingType?
  startDate   DateTime?     @map("start_date")
  durationMin Int?
  name        String?
  gymId       String?
  groupId     String?
  templateId  String?
  price       Float?

  gym         Gym?              @relation(fields: [gymId], references: [id])
  group       Group?            @relation(fields: [groupId], references: [id])
  template    TrainingTemplate? @relation(fields: [templateId], references: [id])
  attendances Attendance[]
  trainers    TrainerProfile[]  @relation("TrainingTrainers")
}

model Attendance {
  id                      String           @id @default(cuid())
  traineeId               String?
  unregisteredTraineeId   String?
  trainingId              String
  status                  AttendanceStatus @default(PRESENT)
  markedAt                DateTime         @default(now())
  createdByUserId         String? // кто отметил посещение (или кто сосканировал QR-код)
  subscriptionTraineeId   String? // если списано по абонементу
  paymentId               String? // если оплачено напрямую
  markedAsPaidByTrainerId String? // если тренер сам отметил 

  trainee               TraineeProfile?      @relation(fields: [traineeId], references: [id])
  unregisteredTrainee   UnregisteredTrainee? @relation(fields: [unregisteredTraineeId], references: [id])
  training              Training             @relation(fields: [trainingId], references: [id])
  createdBy             User?                @relation("createdBy", fields: [createdByUserId], references: [id])
  subscriptionTrainee   SubscriptionTrainee? @relation(fields: [subscriptionTraineeId], references: [id])
  payment               Payment?             @relation(fields: [paymentId], references: [id])
  markedAsPaidByTrainer TrainerProfile?      @relation(fields: [markedAsPaidByTrainerId], references: [id], name: "MarkedAsPaidByTrainer")
}

model Payment {
  id String @id @default(cuid())
  // TODO: add payment details

  attendances          Attendance[]
  traineeSubscriptions SubscriptionTrainee[]
}

model Subscription {
  id           String           @id @default(cuid())
  createdById  String
  maxTrainings Int?
  maxDays      Int?
  name         String
  price        Float?
  notes        String?
  type         SubscriptionType
  isPublic     Boolean          @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy            TrainerProfile        @relation(fields: [createdById], references: [id])
  groups               Group[]
  subscriptionTrainees SubscriptionTrainee[]
}

model SubscriptionTrainee {
  id             String                      @id @default(cuid())
  traineeId      String
  subscriptionId String
  isPaid         Boolean                     @default(false)
  trainingsLeft  Int?
  paymentId      String?
  validUntil     DateTime?
  activeFromDate DateTime?
  activationType SubscriptionActivationType?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  trainee      TraineeProfile @relation(fields: [traineeId], references: [id])
  subscription Subscription   @relation(fields: [subscriptionId], references: [id])
  payment      Payment?       @relation(fields: [paymentId], references: [id])
  attendances  Attendance[]
}

model TrainingTemplate {
  id            String  @id @default(cuid())
  groupId       String?
  trainerId     String
  gymId         String?
  trainingName  String?
  trainingPrice Float?

  durationMin Int
  type        TrainingType

  startDate DateTime
  endDate   DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  group   Group?         @relation(fields: [groupId], references: [id])
  trainer TrainerProfile @relation(fields: [trainerId], references: [id])
  gym     Gym?           @relation(fields: [gymId], references: [id])

  timeSlots TimeSlot[]
  trainings Training[]
}

model TimeSlot {
  id         String  @id @default(cuid())
  templateId String
  dayOfWeek  WeekDay
  hours      Int
  minutes    Int

  template TrainingTemplate @relation(fields: [templateId], references: [id])
}

model RefreshSession {
  id        String   @id @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  tokenHash String
  ip        String
  userAgent String
  isRevoked Boolean  @default(false)
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([tokenHash])
}

model PublicInfo {
  id             String                @id @default(cuid())
  phoneNumbers   String[]              @default([])
  emails         String[]              @default([])
  aboutMe        String?
  socials        PublicSocialNetwork[]
  trainerProfile TrainerProfile[]
}

model SocialNetwork {
  id                  String                @id @default(cuid())
  name                String                @unique
  icon                String?
  publicSocialNetwork PublicSocialNetwork[]
}

model PublicSocialNetwork {
  id              String @id @default(cuid())
  publicContactId String
  socialNetworkId String
  url             String

  publicContact PublicInfo    @relation(fields: [publicContactId], references: [id])
  socialNetwork SocialNetwork @relation(fields: [socialNetworkId], references: [id])
}

model UnregisteredTrainee {
  id          String  @id @default(cuid())
  email       String?
  phone       String?
  age         Int?
  firstName   String?
  lastName    String?
  notes       String?
  displayName String?
  isFrozen    Boolean @default(false)

  traineeId String?
  trainee   TraineeProfile? @relation(fields: [traineeId], references: [id])

  trainerId String
  trainer   TrainerProfile @relation(fields: [trainerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  attendances Attendance[]
}
